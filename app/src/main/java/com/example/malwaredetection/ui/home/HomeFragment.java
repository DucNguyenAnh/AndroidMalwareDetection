package com.example.malwaredetection.ui.home;

import android.content.Context;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;


import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.app.NotificationCompat;
import androidx.core.app.NotificationManagerCompat;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;

import com.example.malwaredetection.R;
import com.example.malwaredetection.ui.FeatureExtractor;
import com.example.malwaredetection.ui.Model;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import brut.apktool.Main;

import static com.example.malwaredetection.ui.SHA256.calculateSHA256;

public class HomeFragment extends Fragment {

    private HomeViewModel homeViewModel;

    ConstraintLayout layout;
    View fragment;
    TextView showHash;
    TextView showName;
    TextView showPositive;
    TextView showNegative;
    TextView showStatus;
    TextView showProgress;
    TextView showProgressdetail;
    TextView showProcessingTime;

    ImageView showImageStatus;
    Button chooseFile;
    ProgressBar pb;
    EditText fullpath;  /* UI variable*/
    HomeFragment a = this;


    Model tf;     /* Model variable*/

    String internalPath;    /* Preprocessor variable*/
    String apkName;
    File apkFile;
    FeatureExtractor fe;
    long duration;  //divide by 1000000 to get milliseconds.


    List<String> all_api_calls_selkbest = new ArrayList<String>();
    Hashtable<String, String> api_index = new Hashtable<String, String>();

    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {
        homeViewModel =
                new ViewModelProvider(this).get(HomeViewModel.class);
        View root = inflater.inflate(R.layout.fragment_home, container, false);
        getViewHome(root);

        Window window = getActivity().getWindow();
        window.setStatusBarColor(Color.BLACK);
        return root;
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        readAllAPI(api_index);  /*Load API Dictionary*/
        readSBAPI(all_api_calls_selkbest);

        setViewProcessbar(true);
        pb.setOnClickListener(v -> {
            chooseFile.callOnClick();   /*Call check button to get file*/
        });

        fullpath.addTextChangedListener(new TextWatcher() {

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void afterTextChanged(Editable s) {  /* After choose file*/
                String[] sentences = fullpath.getText().toString().split("/");
                apkName = sentences[sentences.length-1];
                String internal_apkPath = internalPath + "/" +apkName.substring(0,apkName.length()-4);
                if(!apkName.substring(apkName.lastIndexOf(".")).equals(".apk"))
                {
                    Toast.makeText(getActivity(),"Please choose file with '.apk' extension",Toast.LENGTH_LONG).show();
                    return;
                }
                setViewProcessbar(true);
                AsyncTask.execute(() -> {
                    try {
                        long startTime = System.nanoTime();
                        pb.setOnClickListener(null);
                        File f = new File(internal_apkPath);
                        updateProgress(5,"Checking file has been checked yet?");
                        Thread.sleep( 2 * 1000 );
                        if (!f.exists()) {
                            updateProgress(15,"Decompling file .apk file");
                            Main.main(new String[]{"d", fullpath.getText().toString()  //Decomplie APK
                                    ,"-out",internal_apkPath,"-p",internalPath+"/framework"});
                        }
                        updateProgress(20,"Initializing the feature extractor");
                        fe = new FeatureExtractor(internal_apkPath,all_api_calls_selkbest,api_index,a,getActivity());    //Extract Feature
                        updateProgress(30,"Extracting .smali features");
                        String features = fe.extractingFeature();
                        updateProgress(100,"Done!");
                        tf = new Model(features, getActivity() ); //Run model to get output
                        long endTime = System.nanoTime();
                        Thread.sleep( 300 );
                        duration = (endTime - startTime);  //divide by 1000000 to get milliseconds.
                        getActivity().runOnUiThread(()->{
                            setViewProcessbar(false);
                            showInfo();
                        });
                    } catch (Exception exception) {
                        File file = new File(internal_apkPath);
                        if (file.isDirectory()) {
                            String[] files = file.list();
                            if (files.length == 0) {
                                getActivity().runOnUiThread(()->{
                                    file.delete();
                                    Toast.makeText(getActivity(), "Error when decompile invalid APK.", Toast.LENGTH_SHORT).show();
                                    showProgress.setText("Start");
                                    showProgressdetail.setText("");
                                    pb.setProgress(0);
                                    pb.setOnClickListener(v -> {
                                        chooseFile.callOnClick();   /*Call check button to get file*/
                                    });
                                });
                            }
                        }
                        System.out.println("Error in run model" + exception.getMessage());
                        getActivity().runOnUiThread(()->{
                            showProgressdetail.setText("Error in run model: " + exception.getMessage());
                            pb.setProgress(0);
                            showProgress.setText("Error");
                        });
                    }
                });
            }
        });
        super.onActivityCreated(savedInstanceState);
    }

    public void setViewProcessbar(boolean b){
        if(b){
            pb.setProgress(0);
            showProgress.setText("Start");
            pb.setVisibility(View.VISIBLE);
            showProgress.setVisibility(View.VISIBLE);
            showProgressdetail.setVisibility(View.VISIBLE);
            layout.setVisibility(View.INVISIBLE);
        }else{
            pb.setVisibility(View.INVISIBLE);
            showProgress.setVisibility(View.INVISIBLE);
            showProgressdetail.setVisibility(View.INVISIBLE);
            layout.setVisibility(View.VISIBLE);
        }
    }

    public void updateProgress(int num,String text){
        getActivity().runOnUiThread(()->{
            pb.setProgress(num);
            showProgress.setText(num +"%");
            showProgressdetail.setText(text);
        });
    }

    public void readSBAPI(List<String> all_api_calls_selkbest){
        BufferedReader reader;
        try{
            final InputStream file = getActivity().getAssets().open("selkbest.txt");
            reader = new BufferedReader(new InputStreamReader(file));
            String line = reader.readLine();
            while(line != null){
                all_api_calls_selkbest.add(line);
                line = reader.readLine();
            }
            file.close();
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void readAllAPI(Hashtable<String, String> api_index){
        BufferedReader reader;
        int index = 1;
        try{
            final InputStream file = getActivity().getAssets().open("all_api_calls.txt");
            reader = new BufferedReader(new InputStreamReader(file));
            String line = reader.readLine();
            while(line != null){
                api_index.put(line,String.valueOf(index));
                index++;
                line = reader.readLine();
            }
            file.close();
            reader.close();
        } catch(IOException ioe){
            ioe.printStackTrace();
        }
    }

    private void showInfo()  {
        try {
            apkFile = new File(fullpath.getText().toString());
            String hash= calculateSHA256(apkFile);
            if(apkName.length()>20){
                showName.setText("Name: " + apkName.substring(0,15)+"..."+apkName.substring(apkName.lastIndexOf('.') - 4));
            }else{
                showName.setText("Name: "+apkName);
            }
            showHash.setText("Hash: " + hash.substring(0,15)+"..."+hash.substring(hash.length() - 5));
            showPositive.setText("Positive: " + String.valueOf(tf.getResult()[0][1]));
            showNegative.setText("Negative: " + String.valueOf(tf.getResult()[0][0]));
            if(tf.getResult()[0][0]>tf.getResult()[0][1])
            {
                showStatus.setText("secure");
                showImageStatus.setImageResource(R.drawable._6f5b5659e);
                showStatus.setTextColor(Color.GREEN);
            }else{
                showStatus.setText("insecure");
                showImageStatus.setImageResource(R.drawable.risk);
                showStatus.setTextColor(Color.RED);
            }
            showProcessingTime.setText("Processing time: "+ duration / 1000000000 +" s");
        }catch (Exception exception){
            System.out.println("Error in showing info" + exception.getMessage());
        }
    }

    public void getViewHome(View view) {
        internalPath = getActivity().getFilesDir().toString();

        fragment= view.findViewById(R.id.fragment_fileChooser);

        layout = view.findViewById(R.id.layout_appinfo);
        showHash = view.findViewById(R.id.textView_hash);
        showName = view.findViewById(R.id.textView_name);
        showPositive = view.findViewById(R.id.textView_positive);
        showNegative = view.findViewById(R.id.textView_negative);
        showStatus = view.findViewById(R.id.textView_status);
        showImageStatus = view.findViewById(R.id.imageView_status);
        chooseFile = view.findViewById(R.id.button_browse);
        fullpath = view.findViewById(R.id.editText_path);
        pb = view.findViewById(R.id.progressBar);
        showProgress = view.findViewById(R.id.textView_progess);
        showProgressdetail = view.findViewById(R.id.textView_progressdetail);
        showProcessingTime = view.findViewById(R.id.textView_time);
    }


}