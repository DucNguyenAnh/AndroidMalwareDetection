package com.example.malwaredetection.ui;

import android.content.Context;

import com.example.malwaredetection.ui.home.HomeFragment;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class FeatureExtractor {
    static String path;
    List<String> all_api_calls_selkbest;
    Hashtable<String, String> api_index;
    HomeFragment main;
    private Context appContext;



    public FeatureExtractor(String ex_path, List<String> all_api_calls_selkbest , Hashtable<String,String> api_index, HomeFragment main, Context con ){
        this.path = ex_path;
        this.all_api_calls_selkbest = all_api_calls_selkbest;
        this.api_index = api_index;
        this.main = main;
        this.appContext = con;
    }

    public String readSmali() throws InterruptedException {
        /*Get all smali file in dir*/
        List<String> listFile = new ArrayList<String>();
        File dir = new File(path);
        displayDirectoryContents(dir, listFile);

        /*Extracting feature*/
        AtomicReference<String> feature = new AtomicReference<>("");
        AtomicInteger count = new AtomicInteger(1);
        int size = listFile.size();
        int k =size/8;
        for(int i=0 ; i <8 ;i ++){
            int finalI = i;
            Thread background = new Thread(() -> {
                String content;
                Scanner scanner;
                String line=null;
                Matcher m1;
                Matcher m2;
                Matcher m3;
                Matcher m4;
                Matcher m5;

                Pattern p1 = Pattern.compile(";->");
                Pattern p2 = Pattern.compile("/*Manager");
                Pattern p3 = Pattern.compile("\\(.*\\)");
                Pattern p4 = Pattern.compile("Layout");
                Pattern p5 = Pattern.compile("Landroid");

                String api;
                int max;
                if(finalI == 7)
                    max = size;
                else
                    max = k*(finalI+1);
                BufferedReader bf;
                for (int j = k* finalI; j<max; j++) {
                    System.out.println("Extracting file: " + count.getAndIncrement() + "/" + size);
                    if(main!=null)
                        main.updateProgress(count.get()*60/size+30,"Extracting: "+count.get()+"/"+size +" .smali files");
                    try {
                        bf = new BufferedReader(new FileReader(listFile.get(j)));
                        line = bf.readLine();
                    //Extracting files small
                        while (line!=null) {
                            m1 = p1.matcher(line);
                            m2 = p2.matcher(line);
                            m3 = p3.matcher(line);
                            m4 = p4.matcher(line);
                            m5 = p5.matcher(line);

                            if (m1.find() && m2.find() && m3.find() && !m4.find() && m5.find()) {    //Grep pattern of feature
                                int start = line.indexOf("Landroid");
                                int end = line.indexOf("(",start+5);

                                if(start == -1 || end == -1 || start >=end){
                                    line = bf.readLine();
                                    continue;
                                }
                                api = line.substring(start, end);

                                if (all_api_calls_selkbest.contains(api) && !feature.get().contains(api_index.get(api)) ) {
                                    feature.set(feature + api_index.get(api) + ",");
                                    System.out.println("API: " + api);
                                    System.out.println("Feature: " + feature);

                                }
                            }
                            line = bf.readLine();
                        }
                        bf.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            });
            background.start();
            background.join();
        }
        return feature.get();
    }

    public String extractingFeature() throws InterruptedException {

        String feature = readSmali() + readPermission();   //Append permission to feature
        String[] feature_array = feature.split(",");
        int[] intArray = new int[feature_array.length];

        for(int i = 0; i < feature_array.length; i++) {
            intArray[i] = Integer.parseInt(feature_array[i]);
        }
        bubbleSort(intArray);   //Sort index feature

        StringBuilder builder = new StringBuilder();
        int count = 0;
        String srtArray[] = new String[intArray.length];

        for (int i = 0; i < intArray.length; i++)
            srtArray[i] = String.valueOf(intArray[i]);

        for (String l: new LinkedHashSet<String>(Arrays.asList(srtArray)) ) {
            builder.append(l+",");  //Remove duplicate feature
            count++;
        }
        String result = builder.toString();
        for(int i=0;i<500-count;i++){
            result = result + "0,"; //Append zero
        }
        System.out.println("Result: " + result);
        return result.substring(0,result.lastIndexOf(','));
    }

    void bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++)
            for (int j = 0; j < n - i - 1; j++)
                if (arr[j] > arr[j + 1]) {
                    // swap arr[j+1] v√† arr[i]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
    }

    public String readPermission(){
        try{
            Matcher m1;
            Matcher m2;
            Matcher m3;

            String line , per;
            String allPers="";
            Pattern p1 = Pattern.compile("uses-permission");
            Pattern p2 = Pattern.compile("action");
            Pattern p3 = Pattern.compile("category");

            if(main!=null)
                main.updateProgress(95,"Extracting Permission");
            BufferedReader bf = new BufferedReader(new FileReader(path+"/AndroidManifest.xml"));
            line = bf.readLine();
            while (line!=null) {
                m1 = p1.matcher(line);
                m2 = p2.matcher(line);
                m3 = p3.matcher(line);

                if(m1.find() || m2.find() || m3.find()){
                    per = line.substring(line.indexOf("android:name")+14,line.indexOf('"',line.indexOf("android:name")+15));
                    if(all_api_calls_selkbest.contains(per)) {
                        allPers = allPers + api_index.get(per) +",";
                    }
                }
                line = bf.readLine();
            }
            bf.close();
            return allPers;
        }catch (Exception ex){
            System.out.println("ERROR: "+ex.toString());
        }
        return "";
    }

    public static void displayDirectoryContents(File dir, List<String> listFile) {
        try {
            File[] files = dir.listFiles();
            for (File file : files) {
                if (file.isDirectory()) {
                    displayDirectoryContents(file,listFile);
                } else if(file.getName().endsWith(".smali")) {
                    listFile.add(file.getCanonicalPath());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
