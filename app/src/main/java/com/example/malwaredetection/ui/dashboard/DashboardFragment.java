package com.example.malwaredetection.ui.dashboard;

import android.annotation.SuppressLint;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;

import com.example.malwaredetection.R;
import com.example.malwaredetection.ui.FeatureExtractor;
import com.example.malwaredetection.ui.Model;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

import brut.apktool.Main;

import static com.example.malwaredetection.ui.SHA256.calculateSHA256;

public class DashboardFragment extends Fragment {

    private DashboardViewModel dashboardViewModel;
    View root;
    List<String> all_api_calls_selkbest = new ArrayList<>();
    Hashtable<String, String> api_index = new Hashtable<>();
    Model tf;

    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {
        dashboardViewModel =
                new ViewModelProvider(this).get(DashboardViewModel.class);
        View root = inflater.inflate(R.layout.fragment_dashboard, container, false);

        this.root = root;
        return root;
    }

    @Override
    public void onPause() {
        super.onPause();
        System.out.println("Test pause");
    }

    @SuppressLint("ResourceType")
    public void onActivityCreated(Bundle savedInstanceState) {
        String internalPath = getActivity().getFilesDir().toString();
        String log_file = internalPath + "/dashboard_log.txt";
        File log = new File (log_file);
        if(!log.exists()) {
            try {
                log.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        LinearLayout layout = root.findViewById(R.id.container);
        readAllAPI(api_index);
        readSBAPI(all_api_calls_selkbest);
        final PackageManager pm = getContext().getPackageManager();
        AsyncTask.execute(() -> {
            int id = 0;
            List<ApplicationInfo> packages = pm.getInstalledApplications(PackageManager.GET_META_DATA);
            for(ApplicationInfo appinf:packages) {
                if (appinf.sourceDir.contains("/data/app") && !appinf.sourceDir.contains("malwaredetection")) {
                    /*getActivity().runOnUiThread(() -> {
                        GetInfoPackage(appinf, layout,null);
                    });*/
                    TextView textView_check = new TextView(getActivity());
                    textView_check.setId(id++);
                    getActivity().runOnUiThread(() -> {
                        GetInfoPackage(appinf, layout, textView_check);
                    }); //Đưa vào hàng chờ


                    AtomicReference<String> write_str = new AtomicReference<>("");
                    String path = appinf.sourceDir;
                    String[] sentences = path.split("/");
                    String apkName = sentences[sentences.length - 1];
                    String internal_apkPath = internalPath + "/" + apkName.substring(0, apkName.length() - 4);

                    File fl = new File(path);
                    String hash = calculateSHA256(fl);

                    String data = readFile(hash, log_file); //Đọc log file

                    if (data == null) {
                        Thread background = new Thread(() -> {
                            try {
                                getActivity().runOnUiThread(() -> {
                                    textView_check.setText("15%");
                                });
                                Main.main(new String[]{"d", path  //Decomplie APK
                                        , "-out", internal_apkPath, "-p", internalPath + "/framework"});
                                getActivity().runOnUiThread(() -> {
                                    textView_check.setText("45%");
                                });
                                FeatureExtractor fe = new FeatureExtractor(internal_apkPath, all_api_calls_selkbest, api_index, null, getActivity());    //Extract Feature
                                String features = fe.extractingFeature();
                                getActivity().runOnUiThread(() -> {
                                    textView_check.setText("90%");
                                });
                                write_str.set(write_str + hash + "-" + features + "\n");
                                writeToFile(write_str.get(), log_file);
                                tf = new Model(features, getActivity());
                                if (tf != null) {
                                    getActivity().runOnUiThread(() -> {
                                        if (tf.getResult()[0][0] > tf.getResult()[0][1]) {
                                            textView_check.setTextColor(Color.GREEN);
                                            textView_check.setText("Secure");
                                        } else if (tf.getResult()[0][0] <= tf.getResult()[0][1]) {
                                            textView_check.setTextColor(Color.RED);
                                            textView_check.setText("Insecure");
                                        }
                                    });
                                } else {
                                    textView_check.setTextColor(Color.RED);
                                    textView_check.setText("Error");
                                }
                            } catch (Exception ex) {
                                System.out.println(ex);
                            }
                        });
                        background.start();
                        try {
                            background.join();
                            File dir = new File(internalPath);
                            deleteRecursive(dir);
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }else{
                        String[] arr = data.split("-");
                        String features = arr[1];
                        System.out.println("Feature of " + appinf.packageName + ": "+arr[1]);
                        try {
                            tf = new Model(features, getActivity());
                            Thread.sleep(1000);
                        }catch (Exception ex){}
                        if (tf != null) {
                            getActivity().runOnUiThread(() -> {
                                if (tf.getResult()[0][0] > tf.getResult()[0][1]) {
                                    textView_check.setText("Secure");
                                    textView_check.setTextColor(Color.GREEN);
                                } else if (tf.getResult()[0][0] <= tf.getResult()[0][1]) {
                                    textView_check.setText("Insecure");
                                    textView_check.setTextColor(Color.RED);
                                }
                            });
                        } else {
                            textView_check.setText("Error");
                        }
                    }
                }
            }

            /*id=0;
            for(ApplicationInfo appinf:packages) {
                if (appinf.sourceDir.contains("/data/app") && !appinf.sourceDir.contains("malwaredetection")) {
                    TextView textView_check = getActivity().findViewById(id++);
                    AtomicReference<String> write_str = new AtomicReference<>("");
                    String path = appinf.sourceDir;
                    String[] sentences = path.split("/");
                    String apkName = sentences[sentences.length - 1];
                    String internal_apkPath = internalPath + "/" + apkName.substring(0, apkName.length() - 4);

                    File fl = new File(path);
                    String hash = calculateSHA256(fl);

                    try {
                        String data = readFile(hash, log_file);
                        if (data == null) {
                            Thread background = new Thread(() -> {
                                try {
                                    getActivity().runOnUiThread(() -> {
                                        textView_check.setText("15%");
                                    });
                                    Main.main(new String[]{"d", path  //Decomplie APK
                                            , "-out", internal_apkPath, "-p", internalPath + "/framework"});
                                    getActivity().runOnUiThread(() -> {
                                        textView_check.setText("45%");
                                    });
                                    FeatureExtractor fe = new FeatureExtractor(internal_apkPath, all_api_calls_selkbest, api_index, null, getActivity());    //Extract Feature
                                    String features = fe.extractingFeature();
                                    getActivity().runOnUiThread(() -> {
                                        textView_check.setText("90%");
                                    });
                                    tf = new Model(features, getActivity());
                                    write_str.set(write_str + hash + "-" + features + "\n");
                                    writeToFile(write_str.get(), log_file);
                                    if (tf != null) {
                                        getActivity().runOnUiThread(() -> {
                                            if (tf.getResult()[0][0] > tf.getResult()[0][1]) {
                                                textView_check.setTextColor(Color.GREEN);
                                                textView_check.setText("Secure");
                                            } else if (tf.getResult()[0][0] <= tf.getResult()[0][1]) {
                                                textView_check.setTextColor(Color.RED);
                                                textView_check.setText("Insecure");
                                            }
                                        });
                                    } else {
                                        textView_check.setTextColor(Color.RED);
                                        textView_check.setText("Error");
                                    }
                                } catch (Exception ex) {
                                    System.out.println(ex);
                                }
                            });
                            background.start();
                            background.join();
                            File dir = new File(internalPath);
                            deleteRecursive(dir);
                        }else
                        {
                            String[] arr = data.split("-");
                            String features = arr[1];
                            System.out.println("Feature of " + appinf.packageName + ": "+arr[1]);
                            tf = new Model(features, getActivity());
                            if (tf != null) {
                                getActivity().runOnUiThread(() -> {
                                    if (tf.getResult()[0][0] > tf.getResult()[0][1]) {
                                        textView_check.setText("Secure");
                                        textView_check.setTextColor(Color.GREEN);
                                    } else if (tf.getResult()[0][0] <= tf.getResult()[0][1]) {
                                        textView_check.setText("Insecure");
                                        textView_check.setTextColor(Color.RED);
                                    }
                                });
                            } else {
                                textView_check.setText("Error");
                            }
                            Thread.sleep(1000);
                        }
                    } catch (Exception ex) {
                        textView_check.setText("Error");
                    }
                }
            }*/
        });
        super.onActivityCreated(savedInstanceState);
    }

    void deleteRecursive(File fileOrDirectory) {
        if (fileOrDirectory.isDirectory())
            for (File child : fileOrDirectory.listFiles())
                deleteRecursive(child);

        if(!fileOrDirectory.getAbsolutePath().contains("dashboard_log.txt"))
            fileOrDirectory.delete();
    }

    private void writeToFile(String data, String path) {
        try {
            File file = new File(path);
            FileWriter fr = new FileWriter(file, true);
            BufferedWriter br = new BufferedWriter(fr);
            br.write(data);

            br.close();
            fr.close();
        }
        catch (IOException e) {
            System.out.println("File write failed: " + e.toString());
        }
    }

    public String readFile(String data,String path){
        BufferedReader reader;
        try{
            reader = new BufferedReader(new FileReader(path));
            String line = reader.readLine();
            while(line != null){
                if(line.contains(data))
                    return line;
                line = reader.readLine();
            }
            reader.close();
        } catch(IOException ioe){
            ioe.printStackTrace();
        }
        return null;
    }

    public void GetInfoPackage(ApplicationInfo packageInfo, LinearLayout layout, TextView textView_check){
        ImageView img_temp = new ImageView(getActivity());
        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(220, 220);
        img_temp.setLayoutParams(layoutParams);
        img_temp.setPadding(15,15,15,15);

        LinearLayout layout_temp = new LinearLayout(getActivity());
        TextView textView_name = new TextView(getActivity());

        textView_name.setPadding(25,75,0,0);
        textView_check.setPadding(25,75,0,0);

        layout_temp.setOrientation(LinearLayout.HORIZONTAL);

        textView_name.setText(packageInfo.packageName);

        if(textView_check.getText()!=""){
            if(textView_check.getText() == "Secure"){
                textView_check.setTextColor(Color.GREEN);
                textView_check.setText("Secure");
            }else{
                textView_check.setTextColor(Color.RED);
                textView_check.setText("Insecure");
            }
        }else{
            textView_check.setTextColor(Color.YELLOW);
            textView_check.setText("Pending");
        }

        textView_name.setTextColor(Color.WHITE);
        System.out.println("Installed package :" + packageInfo.packageName);
        getandsetIcon(packageInfo.packageName,img_temp);

        layout_temp.addView(img_temp);
        layout_temp.addView(textView_name);
        layout_temp.addView(textView_check);
        layout.addView(layout_temp);

        System.out.println("Source dir : " + packageInfo.sourceDir);
    }


    @SuppressLint("ResourceType")
    public void additemtoLayout(ApplicationInfo packageInfo, LinearLayout layout){
        ImageView img_temp = new ImageView(getActivity());
        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(220, 220);
        img_temp.setLayoutParams(layoutParams);
        img_temp.setPadding(15,15,15,15);

        LinearLayout layout_temp = new LinearLayout(getActivity());
        TextView textView_name = new TextView(getActivity());
        TextView textView_check = new TextView(getActivity());


        textView_name.setPadding(25,75,0,0);
        textView_check.setPadding(25,75,0,0);

        layout_temp.setOrientation(LinearLayout.HORIZONTAL);
        textView_name.setText(packageInfo.packageName);

        if(tf!=null){
            if(tf.getResult()[0][0]>tf.getResult()[0][1]){
                textView_check.setTextColor(Color.GREEN);
                textView_check.setText("Secure");
            }else if(tf.getResult()[0][0]<=tf.getResult()[0][1]){
                textView_check.setTextColor(Color.RED);
                textView_check.setText("Insecure");
            }
        }else{
            textView_check.setTextColor(Color.RED);
            textView_check.setText("Error");
        }

        textView_name.setTextColor(Color.WHITE);
        System.out.println("Installed package :" + packageInfo.packageName);
        getandsetIcon(packageInfo.packageName,img_temp);

        layout_temp.addView(img_temp);
        layout_temp.addView(textView_name);
        layout_temp.addView(textView_check);
        layout.addView(layout_temp);

        System.out.println("Source dir : " + packageInfo.sourceDir);
    }

    public void getandsetIcon(String app,ImageView imageView){
        try
        {
            Drawable icon = getContext().getPackageManager().getApplicationIcon(app);
            imageView.setImageDrawable(icon);
        }
        catch (PackageManager.NameNotFoundException e)
        {
            e.printStackTrace();
        }
    }

    public void readSBAPI(List<String> all_api_calls_selkbest){
        BufferedReader reader;
        try{
            final InputStream file = getActivity().getAssets().open("selkbest.txt");
            reader = new BufferedReader(new InputStreamReader(file));
            String line = reader.readLine();
            while(line != null){
                all_api_calls_selkbest.add(line);
                line = reader.readLine();
            }
            file.close();
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void readAllAPI(Hashtable<String, String> api_index){
        BufferedReader reader;
        int index = 1;
        try{
            final InputStream file = getActivity().getAssets().open("all_api_calls.txt");
            reader = new BufferedReader(new InputStreamReader(file));
            String line = reader.readLine();
            while(line != null){
                api_index.put(line,String.valueOf(index));
                index++;
                line = reader.readLine();
            }
            file.close();
            reader.close();
        } catch(IOException ioe){
            ioe.printStackTrace();
        }
    }
}